"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTokens = createTokens;
exports.generateToken = generateToken;
exports.verifyToken = verifyToken;
const jsonwebtoken_1 = __importStar(require("jsonwebtoken"));
const error_custom_1 = require("../errors/error.custom");
const error_unauthorized_1 = require("../errors/error.unauthorized");
/**
 * Generates an access token and a refresh token.
 * @param {string} jwtAccessSecret - Secret key for signing the access token.
 * @param {string} jwtRefreshSecret - Secret key for signing the refresh token.
 * @param {JwtPayload} payload - The payload to encode in the tokens.
 * @returns {Promise<{ accessToken: string, refreshToken: string } | Error>} An object containing both tokens or an error.
 */
function createTokens(jwtAccessSecret, jwtRefreshSecret, payload) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!jwtAccessSecret || !jwtRefreshSecret)
                throw new error_custom_1.CustomError('Invalid token secrets', 500);
            const accessToken = jsonwebtoken_1.default.sign(payload, jwtAccessSecret, { expiresIn: '1h' });
            const refreshToken = jsonwebtoken_1.default.sign(payload, jwtRefreshSecret, { expiresIn: '7d' });
            return { accessToken, refreshToken };
        }
        catch (error) {
            return new error_custom_1.CustomError('Unexpected error occurred. Please try again', 500);
        }
    });
}
/**
 * Generates a single JSON Web Token (JWT).
 * @param {string} jwtSecret - Secret key for signing the token.
 * @param {JwtPayload} payload - The payload to encode in the token.
 * @returns {Promise<string | null>} The generated JWT or null if an error occurs.
 */
function generateToken(jwtSecret, payload) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!jwtSecret)
                throw new error_custom_1.CustomError('Invalid token secret', 500);
            return jsonwebtoken_1.default.sign(payload, jwtSecret, { expiresIn: '1h' });
        }
        catch (error) {
            throw error;
        }
    });
}
/**
 * Verifies and decodes a JSON Web Token (JWT).
 * @param {string} token - The JWT token to verify.
 * @param {string} jwtSecret - Secret key used to verify the token.
 * @returns {Promise<JwtPayload>} The decoded token payload if verification is successful.
 * @throws {Error} If the token is expired or invalid.
 */
function verifyToken(jwtSecret, token) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!jwtSecret)
                throw new error_custom_1.CustomError('JWT_SECRET is not defined', 500);
            const decoded = jsonwebtoken_1.default.verify(token, jwtSecret);
            return decoded;
        }
        catch (error) {
            if (error instanceof jsonwebtoken_1.TokenExpiredError) {
                throw new error_unauthorized_1.UnauthorizedError('Token has expired');
            }
            throw new error_unauthorized_1.UnauthorizedError('Invalid Token');
        }
    });
}
