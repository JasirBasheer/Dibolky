services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    dns:
      - 8.8.8.8
      - 8.8.4.4
    restart: unless-stopped
    env_file: ./backend/.env
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "5050:5050"
    environment:
      NODE_ENV: development
      MONGODB_DEBUG: true
      LOGSTASH_HOST: logstash
      HOSTNAME: mern-backend
    networks:
      dibolky-tool:
        aliases:
          - backend
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5050/api/health"]
      interval: 90s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://172.19.0.5:12201"  
        tag: "backend"
        gelf-compression-type: "none"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
    networks:
      dibolky-tool:
        aliases:
          - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.1
    container_name: logstash
    volumes:
      - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "12201:12201/udp"
      - "9600:9600"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      dibolky-tool:
        aliases:
          - logstash
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      dibolky-tool:
        aliases:
          - kibana
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      dibolky-tool:
        aliases:
          - redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      dibolky-tool:
        aliases:
          - nginx
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    container_name: certbot
    env_file: .env
    depends_on:
      - nginx
    environment:
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - LETSENCRYPT_DOMAIN=${LETSENCRYPT_DOMAIN}
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/html
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/html
      --email $${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email
      -d $${LETSENCRYPT_DOMAIN}"
    networks:
      - dibolky-tool

networks:
  dibolky-tool:
    driver: bridge
    name: dibolky-tool

volumes:
  redis_data:
    driver: local
  es_data:
    driver: local