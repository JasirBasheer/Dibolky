import { JwtPayload } from 'jsonwebtoken';
/**
 * Generates an access token and a refresh token.
 * @param {string} jwtAccessSecret - Secret key for signing the access token.
 * @param {string} jwtRefreshSecret - Secret key for signing the refresh token.
 * @param {JwtPayload} payload - The payload to encode in the tokens.
 * @returns {Promise<{ accessToken: string, refreshToken: string } | Error>} An object containing both tokens or an error.
 */
export declare function createTokens(jwtAccessSecret: string, jwtRefreshSecret: string, payload: JwtPayload): Promise<any>;
/**
 * Generates a single JSON Web Token (JWT).
 * @param {string} jwtSecret - Secret key for signing the token.
 * @param {JwtPayload} payload - The payload to encode in the token.
 * @returns {Promise<string | null>} The generated JWT or null if an error occurs.
 */
export declare function generateToken(jwtSecret: string, payload: JwtPayload): Promise<any>;
/**
 * Verifies and decodes a JSON Web Token (JWT).
 * @param {string} token - The JWT token to verify.
 * @param {string} jwtSecret - Secret key used to verify the token.
 * @returns {Promise<JwtPayload>} The decoded token payload if verification is successful.
 * @throws {Error} If the token is expired or invalid.
 */
export declare function verifyToken(jwtSecret: string, token: string): Promise<JwtPayload>;
