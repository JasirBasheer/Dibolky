"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.comparePassword = exports.generatePassword = exports.hashPassword = void 0;
const bcrypt_1 = __importDefault(require("bcrypt"));
/**
 * Hashes a password using bcrypt.
 * @param {string} password - The password to hash.
 * @returns {Promise<string>} The hashed password.
 */
const hashPassword = (password) => __awaiter(void 0, void 0, void 0, function* () {
    const salt = yield bcrypt_1.default.genSalt(10);
    return bcrypt_1.default.hash(password, salt);
});
exports.hashPassword = hashPassword;
/**
 * Generates a random password based on the given name.
 * @param {string} base - The base for the password.
 * @returns {Promise<string>} A generated password.
 * @throws {Error} If an error occurs during password generation.
 */
const generatePassword = (base) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        base = base.replace(/\s+/g, "");
        const randomNumbers = Math.floor(Math.random() * 10000);
        const symbols = "!@#$%&";
        const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
        const password = `${base}${randomSymbol}${randomSymbol}${randomNumbers}`;
        return password;
    }
    catch (error) {
        throw error;
    }
});
exports.generatePassword = generatePassword;
/**
 * Compares a plain password with a hashed password.
 * @param {string} password - The plain password.
 * @param {string} hashedPassword - The hashed password.
 * @returns {Promise<boolean>} True if the passwords match, false otherwise.
 */
const comparePassword = (password, hashedPassword) => __awaiter(void 0, void 0, void 0, function* () {
    return bcrypt_1.default.compare(password, hashedPassword);
});
exports.comparePassword = comparePassword;
